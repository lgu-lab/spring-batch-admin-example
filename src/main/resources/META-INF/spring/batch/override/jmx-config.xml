<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx"
	       xmlns:context="http://www.springframework.org/schema/context"
	
	xsi:schemaLocation="http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd">


		<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
			<property name="locateExistingServerIfPossible" value="true" />
		</bean>

		<!-- JMX : Spring context specific domain name -->
		<context:mbean-export default-domain="spring-my-app-01" server="mbeanServer" />
       
		<!-- JMX : Spring integration specific domain name -->
		<int-jmx:mbean-export id="integrationMBeanExporter" default-domain="spring-my-app-01" server="mbeanServer" />

		<!-- Override the `batchMBeanExporter` and set the `proxyTargetClass` property to true on the `jobService` proxy.
		This is a workaround for the related https://jira.spring.io/browse/BATCHADM-126 -->
		<bean id="batchMBeanExporter" class="org.springframework.batch.admin.jmx.BatchMBeanExporter">
			<property name="server" ref="mbeanServer"/>
			<property name="jobService">
			<bean class="org.springframework.aop.framework.ProxyFactoryBean">
			<property name="targetName" value="jobService"/>
			<property name="proxyTargetClass" value="true"/>
		</bean>
		</property>
			<property name="defaultDomain" value="spring-my-app-01"/>
		</bean>

</beans>
